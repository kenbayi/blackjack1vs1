// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: statistics.proto

package statistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatisticsService_GetGeneralGameStats_FullMethodName = "/statistics.StatisticsService/GetGeneralGameStats"
	StatisticsService_GetUserGameStats_FullMethodName    = "/statistics.StatisticsService/GetUserGameStats"
	StatisticsService_GetLeaderboard_FullMethodName      = "/statistics.StatisticsService/GetLeaderboard"
)

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to get game statistics
type StatisticsServiceClient interface {
	GetGeneralGameStats(ctx context.Context, in *GetGeneralGameStatsRequest, opts ...grpc.CallOption) (*GetGeneralGameStatsResponse, error)
	GetUserGameStats(ctx context.Context, in *GetUserGameStatsRequest, opts ...grpc.CallOption) (*GetUserGameStatsResponse, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) GetGeneralGameStats(ctx context.Context, in *GetGeneralGameStatsRequest, opts ...grpc.CallOption) (*GetGeneralGameStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGeneralGameStatsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetGeneralGameStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUserGameStats(ctx context.Context, in *GetUserGameStatsRequest, opts ...grpc.CallOption) (*GetUserGameStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserGameStatsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetUserGameStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility.
//
// Service to get game statistics
type StatisticsServiceServer interface {
	GetGeneralGameStats(context.Context, *GetGeneralGameStatsRequest) (*GetGeneralGameStatsResponse, error)
	GetUserGameStats(context.Context, *GetUserGameStatsRequest) (*GetUserGameStatsResponse, error)
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatisticsServiceServer struct{}

func (UnimplementedStatisticsServiceServer) GetGeneralGameStats(context.Context, *GetGeneralGameStatsRequest) (*GetGeneralGameStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneralGameStats not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUserGameStats(context.Context, *GetUserGameStatsRequest) (*GetUserGameStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGameStats not implemented")
}
func (UnimplementedStatisticsServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}
func (UnimplementedStatisticsServiceServer) testEmbeddedByValue()                           {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatisticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_GetGeneralGameStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralGameStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetGeneralGameStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetGeneralGameStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetGeneralGameStats(ctx, req.(*GetGeneralGameStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUserGameStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGameStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUserGameStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetUserGameStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUserGameStats(ctx, req.(*GetUserGameStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeneralGameStats",
			Handler:    _StatisticsService_GetGeneralGameStats_Handler,
		},
		{
			MethodName: "GetUserGameStats",
			Handler:    _StatisticsService_GetUserGameStats_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _StatisticsService_GetLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics.proto",
}
